name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: yarn install

      - name: Build website and create HTML
        env:
          ONE_SERVER_URL: https://astral-integration.com
          CUSTOM_DOMAIN: "true"
        run: |
          yarn build
          node scripts/create-html.js
          
      - name: Make entry files accessible
        run: |
          echo "Identifying the current entry file hash..."
          ENTRY_FILES=$(find dist -name "_virtual_one-entry-*.js" -not -name "*stable*" | sort)
          echo "Found entry files: $ENTRY_FILES"
          
          # Copy all entry files to both dist root and dist/assets
          echo "Copying entry files to key locations..."
          mkdir -p dist/assets
          find dist -name "_virtual_one-entry-*.js" -exec cp {} dist/ \;
          find dist -name "_virtual_one-entry-*.js" -exec cp {} dist/assets/ \;
          
          # Create a special backup copy with the date in the filename
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          MAIN_ENTRY_FILE=$(find dist -name "_virtual_one-entry-*.js" -not -name "*stable*" | head -1)
          if [ -n "$MAIN_ENTRY_FILE" ]; then
            ENTRY_BASENAME=$(basename "$MAIN_ENTRY_FILE")
            cp "$MAIN_ENTRY_FILE" "dist/${TIMESTAMP}_${ENTRY_BASENAME}"
            cp "$MAIN_ENTRY_FILE" "dist/assets/${TIMESTAMP}_${ENTRY_BASENAME}"
            echo "Created backup copy with timestamp: ${TIMESTAMP}_${ENTRY_BASENAME}"
          fi
          
          # Create a fallback HTML file to debug any issues
          cat > dist/debug.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Entry File Debug</title>
            <style>
              body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              h1 { color: #333; }
              .file-list { background: #f5f5f5; padding: 15px; border-radius: 5px; }
              .load-btn { margin-top: 10px; padding: 8px 16px; background: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }
            </style>
          </head>
          <body>
            <h1>Entry File Debug</h1>
            <p>This page lists all available entry files and allows you to attempt to load them.</p>
            
            <div id="file-list" class="file-list">Loading...</div>
            
            <script>
              // Find all entry files
              async function findEntryFiles() {
                const fileList = document.getElementById('file-list');
                fileList.innerHTML = '<p>Searching for entry files...</p>';
                
                try {
                  // Try different paths to find entry files
                  const paths = [
                    '/_virtual_one-entry-*.js',
                    '/assets/_virtual_one-entry-*.js',
                    '/*/_virtual_one-entry-*.js',
                    '/*/assets/_virtual_one-entry-*.js'
                  ];
                  
                  const filesFound = [];
                  
                  for (const path of paths) {
                    try {
                      const response = await fetch(path);
                      if (response.ok) {
                        filesFound.push(path);
                      }
                    } catch (e) {
                      console.log(`Error checking ${path}:`, e);
                    }
                  }
                  
                  if (filesFound.length > 0) {
                    let html = '<h3>Found entry files:</h3><ul>';
                    filesFound.forEach(file => {
                      html += `<li>${file} <button class="load-btn" onclick="loadScript('${file}')">Load</button></li>`;
                    });
                    html += '</ul>';
                    fileList.innerHTML = html;
                  } else {
                    fileList.innerHTML = '<p>No entry files found. Checking directory...</p>';
                    
                    // Try to list files in assets directory
                    try {
                      const response = await fetch('/assets/');
                      fileList.innerHTML += '<p>Assets directory accessible: ' + response.status + '</p>';
                    } catch (e) {
                      fileList.innerHTML += '<p>Assets directory not accessible</p>';
                    }
                  }
                } catch (e) {
                  fileList.innerHTML = '<p>Error: ' + e.message + '</p>';
                }
              }
              
              // Load a script
              function loadScript(src) {
                const script = document.createElement('script');
                script.type = 'module';
                script.src = src;
                script.onload = () => alert('Script loaded successfully!');
                script.onerror = (e) => alert('Error loading script: ' + e);
                document.head.appendChild(script);
              }
              
              findEntryFiles();
            </script>
          </body>
          </html>
          EOL
          
          # List files in dist and dist/assets
          echo "Files in dist root:"
          ls -la dist/*.js | grep "_virtual_one-entry"
          echo "Files in dist/assets:"
          ls -la dist/assets/*.js | grep "_virtual_one-entry" || echo "No matching files found"

      - name: Check build artifacts
        run: |
          echo "Contents of dist:"
          ls -la dist/
          echo "Contents of dist/assets:"
          ls -la dist/assets/
          echo "Checking for CNAME file:"
          cat dist/CNAME
          echo "Checking for entry files:"
          find dist -name "_virtual_one-entry*.js" | sort

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          
      - name: Add entry files directly to gh-pages
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Clone the gh-pages branch
          git clone --depth 1 --single-branch --branch gh-pages https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git gh-pages-clone
          
          # Copy all entry files directly to gh-pages root and assets
          mkdir -p gh-pages-clone/assets
          
          # Find all entry files in dist
          find dist -name "_virtual_one-entry*.js" > entry-files-list.txt
          
          # Create a deduplicated entry-files.txt without the dist/ prefix
          echo -n "" > gh-pages-clone/entry-files.txt
          while IFS= read -r file; do
            # Get the basename of the file
            basename=$(basename "$file")
            # Copy to gh-pages root and assets ensuring they're not there already
            cp -f "$file" "gh-pages-clone/$basename"
            cp -f "$file" "gh-pages-clone/assets/$basename"
            # Add to the list without dist/ prefix, avoiding duplicates
            grep -q "/$basename" gh-pages-clone/entry-files.txt || echo "/$basename" >> gh-pages-clone/entry-files.txt
            grep -q "/assets/$basename" gh-pages-clone/entry-files.txt || echo "/assets/$basename" >> gh-pages-clone/entry-files.txt
          done < entry-files-list.txt
          
          # Remove any 20* timestamp files from the entry-files.txt
          grep -v "/20[0-9]*_" gh-pages-clone/entry-files.txt > tmp-entry-files.txt
          mv tmp-entry-files.txt gh-pages-clone/entry-files.txt
          
          # Create a simple html file that lists all available entry files
          echo '<!DOCTYPE html><html><head><title>Available Entry Files</title></head><body><h1>Available Entry Files</h1><ul>' > gh-pages-clone/entry-files.html
          cat gh-pages-clone/entry-files.txt | xargs -I{} echo '<li><a href="{}">{}</a></li>' >> gh-pages-clone/entry-files.html
          echo '</ul></body></html>' >> gh-pages-clone/entry-files.html
          
          # Add the entry file name and hash to a txt file for reference - WITHOUT dist/ prefix
          echo "Deployed _virtual_one-entry files ($(date))" > gh-pages-clone/entry-file-info.txt
          cat gh-pages-clone/entry-files.txt >> gh-pages-clone/entry-file-info.txt
          
          # Create a direct copy of the entry files in the root with hardcoded names
          MAIN_ENTRY_FILE=$(find gh-pages-clone -name "_virtual_one-entry-*.js" -not -name "*stable*" -not -path "*/assets/*" | head -1)
          if [ -n "$MAIN_ENTRY_FILE" ]; then
            cp -f "$MAIN_ENTRY_FILE" "gh-pages-clone/main-entry.js"
            cp -f "$MAIN_ENTRY_FILE" "gh-pages-clone/assets/main-entry.js"
            echo "/main-entry.js" >> gh-pages-clone/entry-files.txt
            echo "/assets/main-entry.js" >> gh-pages-clone/entry-files.txt
          fi
          
          # Commit and push the changes
          cd gh-pages-clone
          git add entry-file-info.txt entry-files.txt entry-files.html assets/ main-entry.js .
          git commit -m "Add all entry files for redundancy" || echo "No changes to commit"
          git push || echo "No changes to push" 